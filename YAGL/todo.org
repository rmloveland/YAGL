#+title: YAGL TODOs
#+author: Rich Loveland
#+email: r@rmloveland.com

* Reference

  Adding links to books, web stuff, etc. so I don't have to keep
  linking them from issues.

  - [[~/Dropbox/Documents/conway-perl-best-practices.chm][Conway, Perl Best Practices]]

  - [[https://books.google.com/books/about/Graph_Algorithms.html?id=m3QTSMYm5rkC][Even, Graph Algorithms]]

* Current

* Staging

** TODO Implement vertex merging

   This is a prerequisite for graph coloring (at least one method,
   that is).

** TODO Minimum spanning tree

   ... for weighted, undirected graphs

* Someday/Maybe

** TODO csv: write a specification for the serialization format

   As the [[csv: unweighted graphs should have -1 in the weight column]]
   TODO item shows, there are edge cases in the format that have not
   been thought through.

** TODO csv: unweighted graphs should have -1 in the weight column
   
** TODO get_edge(s) should *only* return a list of edges (not edge attributes)

** TODO Implement =is_isomorphic()= method

** TODO Implement =is_subgraph()= method

** TODO Research property based testing

** TODO Optimize CSV format

   It would be nice not to require duplicate entries (except perhaps
   for undirected graphs?).

   It would also be nice to have some way to store:

   - Arbitrary edge attributes
   - Arbitrary vertex attributes
     
   Should we be able to open in Excel and do "things" with it?

   High-level goal: pass serialized graph representation via CSV to
   graph library implementations in other languages.

** TODO Allow for directed graphs option

   This will require:

   - Passing an is_directed flag or similar
   - Some changes to the internal representation
   - Probably many other things

** TODO Write example applications that use graph algorithms

** TODO Write documentation

** TODO Add links to references in documentation

** TODO Create and release a YAGL distribution

   - Dist::Zilla?
   - Module::Starter::PBP?

** TODO Rename $self->edge_between('A', 'B') to $self->has_edge('A', 'B') ?

   This would need to be part of a larger rethinking of names.

** TODO Consider removing non-core dependencies

   It would be nice to be able to run this bad girl on a core Perl
   install on any machine, including with older versions of Perl.

   Right now the non-core dependencies are:

   - Smart::Match
   - Hash::PriorityQueue
     
   Estimated scope of work is:

   - Assess usage of these modules
   - See what smart-matching alternatives exist (if any)
   - See if it's even worth doing, since it might not be worth caring
     that much about this, more of a nice-to-have.
   
** TODO Devise a consistent method naming scheme

   e.g., Should we rename 'get_vertices' to just 'vertices' ?

   Looks like [[~/Dropbox/Documents/conway-perl-best-practices.chm]] says
   no.  It recommends calling things =get_foo()= and =set_foo()=.
   
** TODO Refactor (and document!) =_st_add()= and friends

   These are pretty janky and make e.g. the core of Dijkstra kinda
   hard to read.

   Also, they don't have any docs explaining the core data structure
   they're using, which is basically a linked list.

   Also, they really need a redesign to be more general and reusable.

** TODO add $self->has_path() method

   Return a boolean instead of the paths as arrays.

   Ideally this should be optimized to be a much cheaper check than to
   generate all the paths and then throw them away.

** TODO add $self->paths('a', 'b') method

   Given two vertices 'A' and 'B', return one or all of:

   - all of the possible paths between them, as arrays

   - the # of possible paths between them.  This could also be called
     =$self->connectivity('A', 'B')=
** TODO Replace ad hoc internal spanning tree implementation with a proper Graph object

   In order for this to work, a graph needs to know whether it is a tree, which means it needs:

   - [ ] g->is_tree method
     - [ ] g->is_connected

   Further, you will need a way to walk the tree, which requires:

   - [ ] g->vertex->prev method
     - This will replaces the current =$st->{$vertex}->{prev}=
       ad-hoc-ness

